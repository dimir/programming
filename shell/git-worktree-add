#!/bin/bash

usage()
{
	local msg=$1
	shift

	[ -n "$msg" ] && echo $msg

	echo "usage: $0 [-t] [-x] [-h] <dir>"
	echo "-t    working on a tag instead of branch"
	echo "-x    enable bash trace"
	echo "-h    show this help message"
	exit 1
}

get_branch_name()
{
	found=0

	origin_prefixes=()
	if [ $tag -eq 1 ]; then
		origin_prefixes+=("")
	else
		for i in $(git remote); do
			origin_prefixes+=("$i/")
		done
	fi

	for ((i=$i_max; $i >= 0; i--)); do
		dir="${DIRS[i]}"

		[ -n "$branch" ] && dir="$dir/"
		branch="$dir$branch"

		for o in "${origin_prefixes[@]}"; do
			if git rev-parse --verify "$o$branch" > /dev/null 2>&1; then
				found=1
				break
			fi
		done

		[ $found -eq 1 ] && break
	done
}

tag=0
trace=0
path=

while [ -n "$1" ]; do
	case $1 in
		-t)
			tag=1
			;;
		-x)
			trace=1
			;;
		-h)
			usage
			;;
		-*)
			usage "$1: unknown option"
			;;
		*)
			path="$1"
			;;
	esac
	shift
done

[ -z "$path" ] && usage

dname=$(dirname $path)

[ -d $dname ] || usage "did you forget to create \"$dname\" directory?"

path=$(readlink -f $path)

[ $trace -eq 1 ] && set -x

# find out which part of the right side refers to a branch
branch=
found=

IFS='/' read -ra DIRS <<< "$path"
let i_max=${#DIRS[@]}-1

get_branch_name

if [ $found -eq 0 ]; then
	if ! git fetch --tags > /dev/null 2>&1; then
		echo "can't even \"git fetch\", are you in the git repo?"
		exit 1
	fi
	
	get_branch_name
fi

if [ $found -eq 0 ]; then
	if [ $tag -eq 1 ]; then
		echo "could not find tag \"$path\", see available with \"git tag -l\""
	else
		echo "$path: could not find related branch, see available with \"git branch -a\""
	fi

	exit 1
fi

echo "branch=[$branch] path=[$path]"

git worktree add -f "$path" "$branch" || exit

cd "$path"
